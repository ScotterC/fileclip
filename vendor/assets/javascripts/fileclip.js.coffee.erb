class window.FileClip
  _clicked_button: ""

  @env = ->
    "<%= Rails.env %>"

  constructor: (pickerOptions) ->
    @pickerOptions = pickerOptions || {}

    excludedEnvs = <%= FileClip.configuration.excluded_environments %>
    if @inArray(excludedEnvs, FileClip.env()) != -1
      return false

    @loadFilepicker()
    filepicker.setKey('<%= FileClip.configuration.filepicker_key %>');

  # For filepicker_helper
  # Accepts button that to be clicked and optional callback
  button: (target, callback) ->
    $(document).on "click", target, =>
      @buttonHandler(target, callback)

  # Handler to set which button was clicked and to pass on callback
  # To puicker
  buttonHandler: (target, callback) ->
    @_clicked_button = $(target)
    @picker(callback)

  picker: (callback) =>
    pickerOptions =
      mimetypes: "<%= FileClip.configuration.mime_types %>"
      container: "modal"
      services: <%= FileClip.configuration.services %>
      maxSize: (<%= FileClip.configuration.max_size %> * 1024 * 1024)
      openTo: "<%= FileClip.configuration.default_service %>"

    $.extend(pickerOptions, @pickerOptions)

    filepicker.pickAndStore pickerOptions,
      location: "S3"
      path: "<%= FileClip.configuration.storage_path %>"
      access: "<%= FileClip.configuration.file_access %>"
    , (fpfile) =>
      @imageHandler fpfile, callback
    , (error) =>
      console.log error.code

  # Accepts a filepicker file and optional callback
  # Passes file and button clicked to a callback
  # Target if passed in
  # id to look up the link where it should be going
  # or clicked button's next input
  imageHandler: (fpfile, callback, target) ->
    file = fpfile[0]

    $file_target = if not @_clicked_button
      $(target).find(".js-fileclip_url")
    else if @_clicked_button.data("id")
      $("##{@_clicked_button.data("id")}").next(".js-fileclip_url")
    else
      @_clicked_button.next(".js-fileclip_url")

    if $file_target.length > 0
      $file_target.val file.url
    else
      console.log "File Failed to Save"

    callback(file, @_clicked_button) if callback

  loadFilepicker: ->
    ((a) ->
      return if window.filepicker
      b = a.createElement("script")
      b.type = "text/javascript"
      b.async = not 0
      b.src = ((if "https:" is a.location.protocol then "https:" else "http:")) + "//api.filepicker.io/v1/filepicker.js"
      c = a.getElementsByTagName("script")[0]
      c.parentNode.insertBefore b, c
      d = {}
      d._queue = []
      e = "pick,pickMultiple,pickAndStore,read,write,writeUrl,export,convert,store,storeUrl,remove,stat,setKey,constructWidget,makeDropPane".split(",")
      f = (a, b) ->
        ->
          b.push [a, arguments]

      g = 0

      while g < e.length
        d[e[g]] = f(e[g], d._queue)
        g++
      window.filepicker = d
    ) document

  inArray: (array, value) ->
    return array.indexOf(value) if array.indexOf
    i = 0

    while i < array.length
      return i  if array[i] is value
      i++
    -1