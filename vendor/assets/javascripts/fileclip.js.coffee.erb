class window.FileClip
  @env = ->
    "<%= Rails.env %>"

  constructor: (setup = true) ->
    @pickerOptions =
      mimetypes: "<%= FileClip.configuration.mime_types %>"
      container: "modal"
      services: <%= FileClip.configuration.services %>
      maxSize: (<%= FileClip.configuration.max_size %> * 1024 * 1024)
      openTo: "<%= FileClip.configuration.default_service %>"

    @storeOptions =
      location: "S3"
      path: "<%= FileClip.configuration.storage_path %>"
      access: "<%= FileClip.configuration.file_access %>"

    # escape if excluded
    if @inArray(<%= FileClip.configuration.excluded_environments %>, FileClip.env()) != -1
      return false

    @loadFilepicker()
    filepicker.setKey('<%= FileClip.configuration.filepicker_key %>')

    if setup
      for field in $("input[type='fileclip']")
        do (field) =>
          @setupButton(field)

  setupButton: (field, callback = null) ->
    button = document.createElement("button")
    button.setAttribute('type', 'button')

    $field = $(field)
    klass  = $field.data("button-class") || ""
    id     = $field.data("button-id")    || ""
    text   = $field.data("button-text")

    # Given Callback in JS overrides template callback
    callback = callback || eval($field.data("callback"))

    # If activation disabled, no callbacks are run
    activate = $field.data("activate") || true

    button.innerHTML = text
    button.className = klass
    button.setAttribute("id", id)

    field.style.display = "none"

    if activate
      button.onclick = =>
        button.blur()
        filepicker.pickAndStore @pickerOptions, @storeOptions, (fpfile) ->
          field.value = fpfile[0].url
          callback() if callback
        , (error) =>
          if window.console and $.isFunction(window.console.log)
            window.console.log error.code
        return false

    # TODO: don't show button until dialog is loaded?
    field.parentNode.insertBefore(button, field.nextSibling)

  loadFilepicker: ->
    ((a) ->
      return if window.filepicker
      b = a.createElement("script")
      b.type = "text/javascript"
      b.async = not 0
      b.src = ((if "https:" is a.location.protocol then "https:" else "http:")) + "//api.filepicker.io/v1/filepicker.js"
      c = a.getElementsByTagName("script")[0]
      c.parentNode.insertBefore b, c
      d = {}
      d._queue = []
      e = "pick,pickMultiple,pickAndStore,read,write,writeUrl,export,convert,store,storeUrl,remove,stat,setKey,constructWidget,makeDropPane".split(",")
      f = (a, b) ->
        ->
          b.push [a, arguments]
      g = 0
      while g < e.length
        d[e[g]] = f(e[g], d._queue)
        g++
      window.filepicker = d
    ) document

  inArray: (array, value) ->
    return array.indexOf(value) if array.indexOf
    i = 0

    while i < array.length
      return i  if array[i] is value
      i++
    -1

jQuery ->
  if $("input[type='fileclip']").length > 0
    new FileClip
